/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id("org.openjfx.javafxplugin") version "0.0.13"
    id("maven-publish")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

def junitVersion = "5.8.2"

javafx {
    version = "19"
    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.fxml', 'javafx.base' ]
}

dependencies {
    // Use JUnit test framework.
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'

    // Picocli
    implementation 'info.picocli:picocli:4.6.3'

    // Sentry SDK
    implementation 'io.sentry:sentry:6.10.0'
}

application {
    // Define the main class for the application.
    mainClass = 'DNAnalyzer.Main'
}

publishing {
    repositories {
        maven {
            name = "Github"
            url = uri("https://maven.pkg.github.com/Verisimilitude11/DNAnalyzer")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        register("jar", MavenPublication) {
            from(components["java"])
            groupId = 'live.dnanalyzer'
            artifactId = 'dnanalyzer'
            version = '2.0.0'
            pom {
                url.set("https://github.com/Verisimilitude11/DNAnalyzer.git")
            }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


jar {
    manifest {
        attributes 'Main-Class': 'DNAnalyzer.Main'
    }

    duplicatesStrategy = 'exclude'

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}